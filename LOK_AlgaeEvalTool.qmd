---
title: "Lake Okeechobee Algae Condition Evaluation"
# format: html
format: 
  html:
    page-layout: full
    code-tools:
      source: https://github.com/SwampThingPaul/LOK_AlgaeEval/LOK_AlgaeEvalTool.qmd
server: shiny
editor_options:
  chunk_output_type: console
---

```{r, include=F}
#| context: setup

# library(AnalystHelper)
library(plyr)
library(reshape2)

library(mgcv)

library(ggplot2)
library(cowplot)
# library(gridExtra)
theme_set(theme_minimal(base_size = 16)+
            theme_bw()+
            theme(panel.border = element_rect("black",fill=NA,linewidth=1)))

library(flextable)

#Folder.Maker(paths);#One and done. Creates folders in working directory.
data.path <- "./Data/"

## function 
sentence_case_multiple <- function(text) {
  text <- tolower(text) # Convert all to lowercase
  gsub("(^|(?<=[.!?]\\s))(\\p{L})", "\\U\\2", text, perl = TRUE) # Capitalize first letter after punctuation
}

# Data --------------------------------------------------------------------
alt.vals <- c("NA25f","PA25","PA_FWOLL","LCR1")
alt.vals.f <- factor(alt.vals,levels = alt.vals)
alt.cols  <- adjustcolor(c("black","indianred1","grey50","dodgerblue1"),0.5)
## RSM Data ----------------------------------------------------------------
RSM.data <-read.csv(paste0(data.path,"RSM_data.csv"))

## For HGAM Models
RSM.sum.Q.vol <- RSM.data
eco.region.ls <- c("Littoral_North", "Littoral_South", "Littoral_West", "nearshore", "pelagic")
RSM.sum.Q.vol <- lapply(eco.region.ls,function(var){
  RSM.sum.Q.vol$EcoZone3.f <- var
  RSM.sum.Q.vol
})
# head(RSM.sum.Q.vol)
RSM.sum.Q.vol <- do.call(rbind,RSM.sum.Q.vol)
RSM.sum.Q.vol$EcoZone3.f <- as.factor(RSM.sum.Q.vol$EcoZone3.f)
RSM.sum.Q.vol$Alt <- factor(RSM.sum.Q.vol$Alt,levels=c("NA25f","PA25","PA_FWOLL","LCR1"))

exp.dat <- expand.grid(
  WY = unique(RSM.data$WY),
  Alt = unique(RSM.data$Alt),
  EcoZone3.f = as.factor(c("Littoral_North", "Littoral_South", "Littoral_West", "nearshore", "pelagic"))
)
LOK.RSM.stg.sea.su  <- merge(RSM.data,exp.dat,c("WY","Alt")) 
# RSM.sum.Q.vol$Alt_plot <- with(RSM.sum.Q.vol,ifelse(Alt=="PA_FWOLL",'FWOLL',as.character(Alt)))
# RSM.sum.Q.vol$Alt_plot <- factor(RSM.sum.Q.vol$Alt_plot,levels=c("NA25f","PA25","FWOLL","LCR1"))
## Models -------------------------------------------------------------------
model.files <- list.files(data.path,full.names = T,pattern="\\.Rdata$")

invisible(lapply(model.files, load, envir = .GlobalEnv))

## Walker (as reported in Walker 2020)
## based on spreadsheet model (.../AlgalBloomMetric-Walker/LOSOM_Chlorophyll_Models_www_06-25-2020_www.xlsm)
logit.ww=function(val,min.freq=1){
  log((val+min.freq)/(100-val+min.freq))
}
inv_logit.ww <- function(logit_val, min.freq=1) {
  exp_val <- exp(logit_val)
  (100 * exp_val + min.freq * (exp_val - 1)) / (1 + exp_val)
}


LOK.RSM.Walker <- rbind(
  cbind(RSM.data[,c("WY","Alt")],data.frame(EcoZone = "Pelagic", 
                                          Chla = exp(2.954+RSM.data$mean.delta.min*0.116),
                                          logit.f20 = (-0.557+RSM.data$mean.delta.min*0.153),
                                          logit.f40 = (-2.270+RSM.data$mean.delta.min*0.291))),
  cbind(RSM.data[,c("WY","Alt")],data.frame(EcoZone = "Littoral_South", 
                                          Chla = exp(1.708+RSM.data$mean.delta.min*0.570),
                                          logit.f20 = (-3.410+RSM.data$mean.delta.min*1.348),
                                          logit.f40 = (-4.059+RSM.data$mean.delta.min*1.044))),
  cbind(RSM.data[,c("WY","Alt")],data.frame(EcoZone = "Littoral_West", 
                                          Chla = exp(1.761+RSM.data$mean.delta.min*0.716),
                                          logit.f20 = (-3.417+RSM.data$mean.delta.min*2.160),
                                          logit.f40 = (-4.108+RSM.data$mean.delta.min*1.412)))
)|>
  mutate(
    f20 = inv_logit.ww(logit.f20),
    f40 = inv_logit.ww(logit.f40),
    Alt = factor(Alt, levels= c("NA25f", "PA25", "PA_FWOLL", "LCR1")),
    EcoZone.f = factor(EcoZone,levels = c("Littoral_South", "Littoral_West","Pelagic"))
  )
vars <- c("WY","Alt","EcoZone.f","Chla","f20","f40")
LOK.RSM.Walker.melt <- melt(LOK.RSM.Walker[,vars],id.vars =vars[1:3])

## LMM predictions
LOK.RSM.LMM  <- LOK.RSM.stg.sea.su|>
  mutate(
    Chla = predict(mod_site.seamean1.stg,newdata = LOK.RSM.stg.sea.su,type="response"),
    f20  = predict(mod_site.sea.f20,newdata = LOK.RSM.stg.sea.su,type="response"),
    f40  = predict(mod_site.sea.f40,newdata = LOK.RSM.stg.sea.su,type="response"),
    Chla.fxf = predict(mod_site.seamean1.stg,newdata = LOK.RSM.stg.sea.su,type="response",
                           exclude=c("s(EcoZone3.f)", "s(EcoZone3.f,mean.delta.min)")),
    f20.fxf = predict(mod_site.sea.f20,newdata = LOK.RSM.stg.sea.su,type="response",
                      exclude=c("s(EcoZone3.f)", "s(EcoZone3.f,mean.delta.min)")),
    f40.fxf = predict(mod_site.sea.f40,newdata = LOK.RSM.stg.sea.su,type="response",
                      exclude=c("s(EcoZone3.f)", "s(EcoZone3.f,mean.delta.min)")),
    Alt = factor(Alt, levels= c("NA25f", "PA25", "PA_FWOLL", "LCR1")) 
  )

vars <- c("WY","Alt","EcoZone3.f","Chla","f20","f40","Chla.fxf","f20.fxf","f40.fxf")
LOK.RSM.LMM.melt <- melt(LOK.RSM.LMM[,vars],id.vars =vars[1:3])
LMM.params <- data.frame(param = sapply(strsplit(as.character(LOK.RSM.LMM.melt$variable),"\\."),"[",1),
                         type = sapply(strsplit(as.character(LOK.RSM.LMM.melt$variable),"\\."),"[",2))
LMM.params$type <- with(LMM.params,ifelse(is.na(type),"ran.eff","fix.eff"))
LOK.RSM.LMM.melt <- cbind(LOK.RSM.LMM.melt,LMM.params)

## HABAM predictions
LOK.RSM.HABAM <- RSM.sum.Q.vol
LOK.RSM.HABAM$TP <- predict(TP_HGAM_mod_sum2,newdata=LOK.RSM.HABAM,type="response",se.fit=T)$fit|>as.numeric()
LOK.RSM.HABAM$DIN <- predict(DIN_HGAM_mod_sum2,newdata=LOK.RSM.HABAM,type="response",se.fit=T)$fit|>as.numeric()
LOK.RSM.HABAM$Chla <- predict(Chla_HGAM_mod_sum3,newdata=LOK.RSM.HABAM,type="response",se.fit=T)$fit|>as.numeric()

vars <- c("WY","Alt","EcoZone3.f","Chla","TP","DIN")
LOK.RSM.HABAM.melt<- melt(LOK.RSM.HABAM[,vars],id.vars =vars[1:3])


```

```{r shiny errors, include = F}
shinyOptions(shiny.error = function() {
  showModal(modalDialog(
    title = "Custom Error",
    "Something went wrong. Please try again later or contact support at support@example.com.",
    easyClose = TRUE,
    footer = NULL
  ))
})

```

```{r walkers eq}
walkerEq2020 <- rbind(
  data.frame(
    region.val = "Pelagic",
    SubRegion = "All",
    slope=c(0.116,0.153,0.291),
    Intercept=c(2.954,-0.557,-2.270),
    R2=c(0.275,0.072,0.237),
    StdErr=c(0.240,0.637,0.665),
    NYrs=16,
    Transform=c("Ln","Logit","Logit"),
    Equation=c("Ln Chla","Max(F,2)/(Max(100-F,2)","Max(F,2)/(Max(100-F,2)"),
    Description=c("","100 x Freq >20 \u03BCg L\u207B\u00B9","100 x Freq >40 \u03BCg L\u207B\u00B9")
  ),
  data.frame(
    region.val = "Littoral",
    SubRegion = "South",
    slope=c(0.570,1.348,1.044),
    Intercept=c(1.708,-3.410,-4.059),
    R2=c(0.731,0.740,0.710),
    StdErr=c(0.438,1.012,0.846),
    NYrs=15,
    Transform=c("Ln","Logit","Logit"),
    Equation=c("Ln Chla","Max(F,2)/(Max(100-F,2)","Max(F,2)/(Max(100-F,2)"),
    Description=c("","100 x Freq >20 \u03BCg L\u207B\u00B9","100 x Freq >40 \u03BCg L\u207B\u00B9")
  ),
  data.frame(
    region.val = "Littoral",
    SubRegion = "West",
    slope=c(0.716,2.160,1.412),
    Intercept=c(1.761,-3.417,-4.108),
    R2=c(0.729,0.776,0.787),
    StdErr=c(0.557,1.482,0.936),
    NYrs=16,
    Transform=c("Ln","Logit","Logit"),
    Equation=c("Ln Chla","Max(F,2)/(Max(100-F,2)","Max(F,2)/(Max(100-F,2)"),
    Description=c("","100 x Freq >20 \u03BCg L\u207B\u00B9","100 x Freq >40 \u03BCg L\u207B\u00B9")
  )
)

walkerEq2020.table <- walkerEq2020 |>
  flextable()|>
  align(j=c(3:8),align="center",part="all")|>
  width(width=c(rep(0.75,2),rep(0.5,5),0.75,2,1.5))|>
  padding(padding=1.25,part="all")|>
  set_header_labels(
    region.val = "Region",
    SubRegion = "Sub-Region",
    slope = "Slope",
    R2 = "R\u00B2",
    StdErr = "Std Error",
    NYrs = "Years"
    )|>
  hline(i=c(3,6))|>
  footnote(j="Description",value=as_paragraph("X Variable = Mean (Daily Stage - 11.5 Ft), Constrained to Maximum Value of 0 Ft, May - August (including unsampled days)"),ref_symbols =c(" "),part="header")|>
  footnote(j="Description",value=as_paragraph("Y Variable = Ln (May - August Mean Chlorophyll-a, \u03BCg L\u207B\u00B9)"),ref_symbols =c(" "),part="header")|>
  footnote(j="Description",value=as_paragraph("Period of Record = (CY) 1999 - 2019, excluding years impacted by hurricanes (2005 - 2007,2017 - 2018)"),ref_symbols =c(" "),part="header")|>
  footnote(j="Description",value=as_paragraph("Number of Years = 16 for Pelagic & Littoral West, 15 for Littoral South"),ref_symbols =c(" "),part="header")|>
  footnote(j="Description",value=as_paragraph("Frequency variables reflect combined risk of exceeding 20 \u03BCg L\u207B\u00B9 or 40 \u03BCg L\u207B\u00B9 bloom criteria across all sampling sites and dates."),ref_symbols =c(" "),part="header")|>
  autofit()
# |>set_caption("Regression equation for mean summer chlorophyll-a and bloom frequenceis as reported by Walker (2020)")


```

# Introduction

This interactive tool allows users to evaluate model predictions presented by Julian et al. (2025). The models within this tool/dashboard are helpful for understanding algal bloom potential and can be incorporated as a performance measure to evaluate future restoration planning efforts. 

To use the tool, select one or more restoration alternative and model. Descriptions of restoration alternatives and models can be found below.  

 
### Alternative Descriptions 

The study (Julian et al. 2025) uses models incorporated in the Lake Okeechobee System Operating Manual (LOSOM) and the Lake Okeechobee Component a Reservoir (LOCAR). Both LOSOM & LOCAR have unique baseline conditions and preferred/selected operational or restoration alternatives. 

The LOSOM modeling effort has two alternatives:  

  1. No-action 2025 (NA25; equivalent to a future without the project baseline). Infrastructure included in this alternative are rehabilitation of the Herbert Hoover Dike, operation of the C-44 reservoir (east of Lake Okeechobee), and operation of stormwater treatment areas (STAs) downstream of Lake Okeechobee that treat lake water in addition to agricultural runoff. This baseline alternative assumes the Lake Okeechobee Regulation Schedule of 2008. 

  2. Preferred alternative 2025 (PA25). Infrastructure included in this alternative those in NA25 as well as C-43 reservoir (west of Lake Okeechobee), and the A-2 stormwater treatment area. This alternative assumes the new LOSOM regulation schedule.  

The LOCAR modeling effort has two alternatives:  

 1. Future without LOCAR-LOSOM (FWOLL; project baseline). This alternative included the Everglades Agricultural Area (EAA) Reservoir and stormwater treatment area. It assumes LOSOM water management and regulatory operational guidance for Lake Okeechobee.  

 2. Lake Okeechobee Storage Reservoir Recommended 1 (LCR1; preferred alternative for LOCAR). This alternative included a 200,000 acre-ft storage reservoir located north of Lake Okeechobee. It assumes LOSOM water management and regulatory operational guidance for Lake Okeechobee.  

<br>

<center> *Summary of baseline and restoration/operational alternative assumptions for the Lake Okeechobee System Operating Manual (LOSOM) and Lake Okeechobee Component a Reservoir (LOCAR) project.* </center>

<div style="text-align: center;">
<img src="https://www.frontiersin.org/files/Articles/1619838/frwa-07-1619838-HTML/image_m/frwa-07-1619838-t002.jpg" alt = "assumption summary" style="width:60%;">
</div>


### Model Descriptions 

In this application, three modeling approaches are presented.

1. Models originally developed my Walker (2020) as part of the Lake Okeechobee System Operating Manual (LOSOM) planning effort.
    - Parameters predicted: Chlorophyll-a and Bloom Frequency (20 and 40 $\mu g\space L^{-1}$)
    - Chlorophyll-a expressed as concentration and bloom frequency expressed as a percentage (0 - 100)

```{r}
#| label: walker2020-Eq
#| tbl-cap: Regression equation for mean summer chlorophyll-a and bloom frequencies as reported by Walker (2020)
#| tbl-cap-location: top
walkerEq2020.table
```

2. Linear mixed models presented in Julian et al. (2025)
    - Parameters predicted: Chlorophyll-a and Bloom Frequency (20 and 40 $\mu g\space L^{-1}$)
    - Chlorophyll-a expressed as concentration and bloom frequency expressed as a proportion (0.0 - 1.0)
3. Lake Okeechobee Hydrodynamic and Biogeochemical chlorophyll hierarchical additive zonal model (LOK HABAM) presented in Julian et al. (2025)
    - Parameters predicted: Chlorophyll-a, Total Phosphorus and Dissolved Inorganic Nitrogen
    - Chlorophyll-a, Total Phosphorus and Dissolved Inorganic Nitrogen expressed as concentration

The linear mixed models (#2 above) and LOK HABAM (#3 above) were fit using Generalized Additive Models (GAMs). As a result, sharing a simple equation for use in other code, object-oriented programs, or spreadsheet-based platforms is not feasible. This application was therefore developed to extend the functionality of the models presented here.


```{r, out.width="70%", fig.cap="Ecological Zones of Lake Okeechobee.", fig.align="center"}
knitr::include_graphics("./Data/LOK_zones.png")
```


### References

Julian P, Walker BW, Surratt D, Davis SE (2025) Planning for the future, algae bloom dynamics in water management and ecosystem restoration efforts. Frontiers in Water. Volume 7. doi: [10.3389/frwa.2025.1619838](https://doi.org/10.3389/frwa.2025.1619838)

Walker WW (2020) DRAFT - Chlorophyll-a Models for LOSOM Applications. Department of Interior


# Interactive Tool/Dashboard LOSOM and LOCAR 

This interactive section allows the user to explore the existing predictions of the models (explained above) for the water management and restoration scenarios presented in Julian et al. (2025). 
<br>

```{r}
#| panel: sidebar
mod.params <- rbind(
  data.frame(model = "LMM",params =c("Chla","f20","f40")),
  data.frame(model = "LOK HABAM",params =c("Chla","TP","DIN"))
)

checkboxGroupInput("Alt","Choose Alternative:",
             choiceNames = alt.vals,
             choiceValues = alt.vals,
             selected = alt.vals,
             inline=T)

radioButtons("Model","Choose Model:",
             choiceNames = c("Walker (2020)", "LMM","LOK HABAM"),
             choiceValues = c("Walker","LMM","HABAM"),
             inline = T)

params <- data.frame(
  param.names = c("Chlorophyll-a","Bloom Frequency (20 \u03BCg L\u207B\u00B9)",
                 "Bloom Frequency (40 \u03BCg L\u207B\u00B9)","Total Phosphorus",
                 "Dissolved Inorganic Nitrogen"),
  param.vals = c("Chla","f20","f40","TP","DIN")
)
params$param.vals.f <- factor(params$param.vals,levels = c("Chla","f20","f40","TP","DIN"))

radioButtons("param","Parameter:",
             choiceNames = params$param.names,
             choiceValues = params$param.vals)

radioButtons("sumstat","Summary Statistic:",
             choiceNames = c("Mean","Median","Min","Max","St.Dev"),
             choiceValues = c("mean","median","min","max","sd"),
             inline=T)
br()
(shiny::downloadButton("downloadData","Download Results"))

```

::: {.panel-tabset}
### Plots
```{r boxplot}

plotOutput("distPlot",height="800px",width="75%")
```

### Data Table
```{r}
tableOutput('data')
```


:::

# User Input Data

There are several options for users to input data.

::: {.panel-tabset}
### 1. User input

```{r}
fixedRow(
  column(2, numericInput("InflowQ", "Inflow Q (m\u00B3)", value = NULL, min = 0)),
  column(2, numericInput("OutflowQ", "Outflow Q (m\u00B3)", value = NULL, min = 0)),
  column(2, numericInput("meanV", "Mean Volume (km\u00B3)", value = NULL, min = 0)),
  column(2, numericInput("WRT", "WRT (yr\u207B\u00B9)", value = NULL, min = 0)),
  column(2, numericInput("meanZ", "Mean Depth (m)", value = NULL, min = 0)),
  column(2, numericInput("mean_delt", "Mean min Stage (m)", value = NULL, min = 0))
)
# actionButton("save", "Save Data")
# tableOutput("output_df")
```

<br>

### 2. Copy and paste 

Copy and paste comma delimited data into the box below. Here is an example string to include: `169961379, 247313284, 4.13, 1.39, 2.51, 2.43`
  
```{r}
textAreaInput("text_input", "Paste Data (comma-separated)", 
               placeholder = "Inflow.Q.m3, Outflow.Q.m3, mean.vol.km3, WRT.yr, mean.depth.m, mean.delta.min",
              width = '100%',
              height = '20%')
# actionButton("convert", "Convert to DataFrame")
# tableOutput("output_df_csv")

```

<br>

### 3. Upload 

Upload a `.csv` file. If you are going to upload a csv it must contain the following column header: `Inflow.Q.m3`,`Outflow.Q.m3`,`mean.vol.km3`,`WRT.yr`,`mean.depth.m`,and `mean.delta.min`. If this header is not identical then the tool will not work. 

Here is an example file: 

```{r}
ex.data <-read.csv(paste0(data.path,"Algae_Shiny_ExampleData.csv"))

(shiny::downloadLink("downloadEx","Download Example CSV"))
```

```{r}
fileInput("file1", "Choose CSV File", accept = ".csv")
# tableOutput("output_df_csv")
```

:::

***

```{r}
# actionButton("check", "Check Data Source & Run Process")
verbatimTextOutput("source")
```

Input data preview: 
```{r}
tableOutput("df_table")
```

<br>
**What model(s) would you like to get predictions from?**

```{r}
radioButtons("User_Model","Choose Model:",
             choiceNames = c("Walker (2020)", "LMM","LOK HABAM"),
             choiceValues = c("Walker","LMM","HABAM"),
             inline = T)
```

<br>

Preview of output data:
```{r}
tableOutput("user_results")
```

```{r}
br()

(shiny::downloadButton("downloadResults","Download Results"))
```

***

<br>

```{r}
#| context: server

# input <- data.frame(Alt=alt.vals)#c("NA25f","LCR1"))
# input$param <- "Chla"
dataset <- reactive({
  if(input$Model=="Walker"){
    subset(LOK.RSM.Walker.melt,Alt%in%input$Alt&variable==input$param)
  } else if(input$Model=="LMM"){
      subset(LOK.RSM.LMM.melt,Alt%in%input$Alt&param==input$param)
  }else if(input$Model=="HABAM"){
      subset(LOK.RSM.HABAM.melt,Alt%in%input$Alt&variable==input$param)
    }
})

output$distPlot <- renderPlot({
  params <- data.frame(
    param.names = c("Chlorophyll-a","Bloom Frequency (20 \u03BCg L\u207B\u00B9)",
                    "Bloom Frequency (40 \u03BCg L\u207B\u00B9)","Total Phosphorus",
                    "Dissolved Inorganic Nitrogen"),
    param.vals = c("Chla","f20","f40","TP","DIN")
  )
  params$param.vals.f <- factor(params$param.vals,levels = c("Chla","f20","f40","TP","DIN"))
  
  labs <- c(expression("Chl-a ("*mu*"g L"^" -1"*")"),
            expression("f20 (>20 "*mu*"g L"^" -1"*")"),
            expression("f40 (>40 "*mu*"g L"^" -1"*")"),
            expression("Total Phosphorus (mg L"^" -1"*")"),
            expression("Dissolved Inorganic Nitrogen (mg L"^" -1"*")"))
  
  
  alt.cols.s <- alt.cols[alt.vals.f[alt.vals%in%input$Alt]]
  
  validate(
    need(input$Model %in% c("Walker","LMM","HABAM"), "Please select a Model to display results."),
    need(input$Alt %in% alt.vals, "Please select one or more alteratives.")
  )
  
  if(input$Model=="Walker"){
    # dat <- subset(LOK.RSM.Walker.melt,Alt%in%input$Alt&variable==input$param)
    dat <- dataset();# 
    
    validate(
      need(input$param %in% c("Chla","f20","f40"), "Please select a parameter (not all models have the same parameters, see above).")
    )
    
    lab.val <- labs[params$param.vals.f%in%input$param]
    
    p1.ww <- ggplot(dat,aes(x=Alt,y=value,fill=Alt))+
      geom_boxplot(outliers=F)+
      labs(title = "",
           subtitle = "Summer Mean Values",
           y = as.expression(lab.val),
           x = "Alternative")+
      facet_wrap(~EcoZone.f,ncol=3)+
      scale_fill_manual(values = alt.cols.s)
    p2.ww <- ggplot(dat,aes(x=WY,y=value,color=Alt))+
      geom_line(linewidth=1)+
      facet_wrap(~Alt+EcoZone.f,ncol=3)+
      scale_color_manual(values = alt.cols.s)+
      labs(title = "",
           subtitle = "Summer Mean Values",
           y = as.expression(lab.val),
           x = "Water Year")
    
    plot_grid(p1.ww,p2.ww,ncol=1,nrow=2,rel_heights = c(1.5,1.5))
  } else if(input$Model=="LMM"){
    dat <- dataset() # subset(dataset(),Alt%in%input$Alt&param==input$param)
    dat.fixed <- aggregate(value~WY+Alt,subset(dat,type=="fix.eff"),mean)|>
      mutate(EcoZone3.f = "Entire Lake")
    
    validate(
      need(input$param %in% c("Chla","f20","f40"), "Please select a parameter (not all models have the same parameters, see above).")
    )
    
    lab.val <- labs[params$param.vals.f%in%input$param]
    
    p1 <- ggplot(dat.fixed,aes(x=Alt,y=value))+
      geom_boxplot(outliers=F,fill=alt.cols.s)+
      labs(title = "Fixed Model Effect Prediction",
           subtitle = "Summer Mean Values",
           y = as.expression(lab.val),
           x = "Alternative")
    p2 <- ggplot(subset(dat,type=="ran.eff"),aes(x=WY,y=value,color=Alt))+
      geom_line(linewidth=1)+
      facet_wrap(~Alt+EcoZone3.f,ncol=5)+
      scale_color_manual(values = alt.cols.s)+
      labs(title = "Random Effect Prediction",
           subtitle = "Summer Mean Values",
           y = as.expression(lab.val),
           x = "Water Year")
    
    plot_grid(p1,p2,ncol=1,nrow=2,rel_heights = c(0.75,1.5))
  } else if(input$Model=="HABAM"){
    # dat <- subset(LOK.RSM.HABAM.melt,Alt%in%input$Alt&variable==input$param)
    dat <- dataset() 
    
    validate(
      need(input$param %in% c("Chla","TP","DIN"), "Please select a parameter (not all models have the same parameters, see above).")
    )
    
    lab.val <- labs[params$param.vals.f%in%input$param]
    
    p1.HABAM <- ggplot(dat,aes(x=Alt,y=value,fill=Alt))+
      geom_boxplot(outliers=F)+
      labs(title = "",
           subtitle = "Summer Mean Values",
           y = as.expression(lab.val),
           x = "Alternative")+
      facet_wrap(~EcoZone3.f,ncol=5)+
      scale_fill_manual(values = alt.cols.s)
    p2.HABAM <- ggplot(dat,aes(x=WY,y=value,color=Alt))+
      geom_line(linewidth=1)+
      facet_wrap(~Alt+EcoZone3.f,ncol=5)+
      scale_color_manual(values = alt.cols.s)+
      labs(title = "",
           subtitle = "Summer Mean Values",
           y = as.expression(lab.val),
           x = "Water Year")
    
    plot_grid(p1.HABAM,p2.HABAM,ncol=1,nrow=2,rel_heights = c(1.5,1.5))
  }
  
})

output$data <- renderTable({
  if(input$Model=="Walker"){
    dat <- dataset()
    xtab <- dcast(dat,EcoZone.f~Alt,value.var="value",match.fun(input$sumstat),na.rm=T)
    xtab <- rename(xtab,c("EcoZone.f" = "EcoZone"))
  } else if(input$Model=="LMM"){
    dat <- dataset() # subset(dataset(),Alt%in%input$Alt&param==input$param)
    dat$model <- "LMM"
    dat.fixed <- aggregate(value~WY+Alt,subset(dat,type=="fix.eff"),mean)|>
      mutate(EcoZone3.f = "Entire Lake")
    
    xtab <- dcast(subset(dat,type=="ran.eff"),EcoZone3.f~Alt,value.var="value",match.fun(input$sumstat),na.rm=T)|>
      rbind(
        dcast(dat.fixed,EcoZone3.f~Alt,value.var="value",match.fun(input$sumstat),na.rm=T)
      )
    xtab <- rename(xtab,c("EcoZone3.f" = "EcoZone"))
    
  }else if(input$Model=="HABAM"){
    dat <- dataset()
    xtab <- dcast(dat,EcoZone3.f~Alt,value.var="value",match.fun(input$sumstat),na.rm=T)
    xtab <- rename(xtab,c("EcoZone3.f" = "EcoZone"))
  }
}, 
digits=2,
caption = "Period of simulation summary based on selected summary statistic (above) for each alternative selected and ecological zone.",
caption.placement = "top"
)


output$downloadData <- downloadHandler(
    filename = function() {
      paste(format(Sys.Date(),"%Y%m%d"),"PredictionData",input$Model,  ".csv", sep="_")
    },
    content = function(file) {
      dat <- dataset()
      write.csv(dat, file,row.names = F)
    }
  )
output$downloadEx <- downloadHandler(
    filename = "ExampleData.csv",
    content = function(file) {
      write.csv(ex.data, file,row.names = F)
    }
  )

## User input data

# Function to detect which input has data
get_active_input <- function(input) {
  if (!is.null(input$file) && !is.null(input$file)) {
    return("File Upload")  # File input has data
  } else if (!is.null(input$text) && nzchar(input$text)) {
    return("Copy Paste")  # Text area has data
  } else if (!is.null(input$fixed) && any(nzchar(unlist(input$fixed)))) {
    return("User Input")  # Fixed row inputs have data
  } else {
    return(NULL)  # No data found
  }
}

# Reactive expression to determine the data source
active_source <- reactive({
  get_active_input(list(
    file = input$file1,
    text = input$text_input,
    fixed = list(input$InflowQ, input$OutflowQ,
                 input$meanV,input$WRT,
                 input$meanZ,input$mean_delt)
  ))
})

# Reactive expression to automatically load data
data_df <- reactive({
  source <- active_source()
  
  if (is.null(source)) return(NULL)
  if(source == "File Upload"){
    df <- read.csv(input$file1$datapath,header = TRUE)
    return(df)
    
  } else if(source == "Copy Paste"){
    df <- read.csv(text = input$text_input, stringsAsFactors = FALSE,header = F,
                   col.names = c("Inflow.Q.m3", "Outflow.Q.m3",
                                 "mean.vol.km3", "WRT.yr",
                                 "mean.depth.m", "mean.delta.min"))
    return(df)
    
  } else if(source == "User Input"){
    df <- data.frame(Inflow.Q.m3 = as.numeric(input$InflowQ),
                     Outflow.Q.m3 = as.numeric(input$OutflowQ),
                     mean.vol.km3 = as.numeric(input$meanV),
                     WRT.yr = as.numeric(input$WRT),
                     mean.depth.m = as.numeric(input$meanZ),
                     mean.delta.min =as.numeric(input$mean_delt))
    return(df)
    
  } else{
    return(NULL)
  }
})

# Display the data source
output$source <- renderText({
  source <- active_source()
  if (is.null(source)) "No data available!"
  else paste("Using data from:", source)
})

# Display the original dataframe
output$df_table <- renderTable({
  # req(data_df())  # Ensure data is available
  head(data_df())
})

# Automatically process data
processed_data <- reactive({
  RSM.user.dat <- data_df()
  
  if(input$User_Model=="Walker"){
    user_results <- rbind(
      cbind(RSM.user.dat,data.frame(EcoZone = "Pelagic",
                                    Chla = exp(2.954+RSM.user.dat$mean.delta.min*0.116),
                                    logit.f20 = (-0.557+RSM.user.dat$mean.delta.min*0.153),
                                    logit.f40 = (-2.270+RSM.user.dat$mean.delta.min*0.291))),
      cbind(RSM.user.dat,data.frame(EcoZone = "Littoral_South",
                                    Chla = exp(1.708+RSM.user.dat$mean.delta.min*0.570),
                                    logit.f20 = (-3.410+RSM.user.dat$mean.delta.min*1.348),
                                    logit.f40 = (-4.059+RSM.user.dat$mean.delta.min*1.044))),
      cbind(RSM.user.dat,data.frame(EcoZone = "Littoral_West",
                                    Chla = exp(1.761+RSM.user.dat$mean.delta.min*0.716),
                                    logit.f20 = (-3.417+RSM.user.dat$mean.delta.min*2.160),
                                    logit.f40 = (-4.108+RSM.user.dat$mean.delta.min*1.412)))
    )|>
      mutate(
        f20 = inv_logit.ww(logit.f20),
        f40 = inv_logit.ww(logit.f40)
      )
    user_results <- user_results[,!names(user_results)%in%c("logit.f20","logit.f40")]
    user_results$EcoZone <- sentence_case_multiple(user_results$EcoZone)
    return(user_results)
    
  } else if(input$User_Model=="LMM"){
    RSM.user.dat <- merge(
      RSM.user.dat,
      data.frame(EcoZone3.f = as.factor(c("Littoral_North", "Littoral_South", "Littoral_West", "nearshore", "pelagic"))),
      all=T)
    
    user_results <- RSM.user.dat|>
      mutate(
        Chla = predict(mod_site.seamean1.stg,newdata = RSM.user.dat,type="response"),
        f20  = predict(mod_site.sea.f20,newdata = RSM.user.dat,type="response"),
        f40  = predict(mod_site.sea.f40,newdata = RSM.user.dat,type="response"),
        Chla.fxf = predict(mod_site.seamean1.stg,newdata = RSM.user.dat,type="response",
                           exclude=c("s(EcoZone3.f)", "s(EcoZone3.f,mean.delta.min)")),
        f20.fxf = predict(mod_site.sea.f20,newdata = RSM.user.dat,type="response",
                          exclude=c("s(EcoZone3.f)", "s(EcoZone3.f,mean.delta.min)")),
        f40.fxf = predict(mod_site.sea.f40,newdata = RSM.user.dat,type="response",
                          exclude=c("s(EcoZone3.f)", "s(EcoZone3.f,mean.delta.min)"))
      )
    
    dat.colnames <- names(user_results)
    dat.colnames[dat.colnames=="EcoZone3.f"] <- "EcoZone"
    colnames(user_results) <- dat.colnames
    user_results$EcoZone <- sentence_case_multiple(user_results$EcoZone)
    return(user_results)
    
  } else if(input$User_Model=="HABAM"){
    
    user_results <- merge(
      RSM.user.dat,
      data.frame(EcoZone3.f = as.factor(c("Littoral_North", "Littoral_South", "Littoral_West", "nearshore", "pelagic"))),
      all=T)
    
    user_results$TP <- predict(TP_HGAM_mod_sum2,newdata=user_results,type="response",se.fit=T)$fit|>as.numeric()
    user_results$DIN <- predict(DIN_HGAM_mod_sum2,newdata=user_results,type="response",se.fit=T)$fit|>as.numeric()
    user_results$Chla <- predict(Chla_HGAM_mod_sum3,newdata=user_results,type="response",se.fit=T)$fit|>as.numeric()
    
    dat.colnames <- names(user_results)
    dat.colnames[dat.colnames=="EcoZone3.f"] <- "EcoZone"
    colnames(user_results) <- dat.colnames
    user_results$EcoZone <- sentence_case_multiple(user_results$EcoZone)
    return(user_results)
    
  } else { NULL }
})

# Display processed dataframe
output$user_results <- renderTable({
  head(processed_data())
})

output$downloadResults <- downloadHandler(
    filename = function() {
      paste(format(Sys.Date(),"%Y%m%d"),"Results",input$User_Model,  ".csv", sep="_")
    },
    content = function(file) {
      user_results <- processed_data()
      write.csv(user_results, file,row.names = F)
    }
  )
# get_active_input <- function(input) {
#   if (!is.null(input$file) && nrow(input$file) > 0) {
#     return("File Upload")  # File input has data
#   } else if (!is.null(input$text) && nzchar(input$text)) {
#     return("Copy Paste")  # Text area has data
#   } else if (!is.null(input$fixed) && any(nzchar(unlist(input$fixed)))) {
#     return("User Input")  # Fixed row inputs have data
#   } else {
#     return(NULL)  # No data found
#   }
# }
# 
# rv <- reactiveValues(data = NULL)
# observeEvent(input$check, {
#   active_source <- get_active_input(list(
#     file = input$file1,
#     text = input$text_input,
#     fixed = list(input$Inflow.Q.m3, input$Outflow.Q.m3,
#                  input$mean.vol.km3,input$WRT.yr,
#                  input$mean.depth.m,input$mean.delta.min)
#   ))
#   
#   output$source <- renderText({
#     if (is.null(active_source)) {
#       "No data available!"
#     } else {
#       paste("Using data from:", active_source)
#     }
#   })
#   
#    # Store the dataframe in reactiveValues
#    if(active_source == "File Upload"){
#     req(input$file1$datapath)
#      rv$data <- read.csv(input$file1$datapath)
#     } else if(active_source == "Copy Paste"){
#       rv$data <- read.csv(text = input$text_input, stringsAsFactors = FALSE,header = F,
#                           col.names = c("Inflow.Q.m3", "Outflow.Q.m3",
#                                         "mean.vol.km3", "WRT.yr", 
#                                         "mean.depth.m", "mean.delta.min"))
#     } else if(active_source == "User Input"){
#       rv$data <- data.frame(Inflow.Q.m3 = as.numeric(input$Inflow.Q.m3),
#                    Outflow.Q.m3 = as.numeric(input$Outflow.Q.m3),
#                    mean.vol.km3 = as.numeric(input$mean.vol.km3),
#                    WRT.yr = as.numeric(input$WRT.yr),
#                    mean.depth.m = as.numeric(input$mean.depth.m),
#                    mean.delta.min =as.numeric(input$mean.delta.min))
#     }
#   
#   # Display the raw dataframe
#     output$df_table <- renderTable({
#       req(rv$data)
#       rv$data
#     })
# })
# 
# observeEvent(input$User_Model, {
#   RSM.user.dat <- rv$data
#   
#   if(input$User_Model=="Walker"){
#     rslt <- rbind(
#       cbind(RSM.user.dat,data.frame(EcoZone = "Pelagic", 
#                                 Chla = exp(2.954+RSM.user.dat$mean.delta.min*0.116),
#                                 logit.f20 = (-0.557+RSM.user.dat$mean.delta.min*0.153),
#                                 logit.f40 = (-2.270+RSM.user.dat$mean.delta.min*0.291))),
#       cbind(RSM.user.dat,data.frame(EcoZone = "Littoral_South", 
#                                 Chla = exp(1.708+RSM.user.dat$mean.delta.min*0.570),
#                                 logit.f20 = (-3.410+RSM.user.dat$mean.delta.min*1.348),
#                                 logit.f40 = (-4.059+RSM.user.dat$mean.delta.min*1.044))),
#       cbind(RSM.user.dat,data.frame(EcoZone = "Littoral_West", 
#                                 Chla = exp(1.761+RSM.user.dat$mean.delta.min*0.716),
#                                 logit.f20 = (-3.417+RSM.user.dat$mean.delta.min*2.160),
#                                 logit.f40 = (-4.108+RSM.user.dat$mean.delta.min*1.412)))
#     )|>
#       mutate(
#         f20 = inv_logit.ww(logit.f20),
#         f40 = inv_logit.ww(logit.f40)
#       )
#     rv$rslt <- rslt  # Store processed dataframe
#   }
#   
#   output$user_results <- renderTable({
#      rv$rslt
#   })
#   
# })
#  


```


